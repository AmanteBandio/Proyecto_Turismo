"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os  # Importa el módulo os, que proporciona una forma de usar funcionalidades del sistema operativo, como acceder a variables de entorno.
from dotenv import load_dotenv  # Importa la función load_dotenv del paquete dotenv, que se usa para cargar variables de entorno desde un archivo .env.
from pathlib import Path  # Importa la clase Path del módulo pathlib, que proporciona una forma orientada a objetos de trabajar con rutas de archivos y directorios.

load_dotenv()  # Llama a la función load_dotenv para cargar las variables de entorno definidas en el archivo .env en el entorno de ejecución del programa.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5c2-e8+pbw8(7+3z0^$_7&#fggc^=bp^6(p0=-^qq0f&$e&+u5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # Permite el debuggeo uwu

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [  # Lista de aplicaciones instaladas en el proyecto Django.
    'django.contrib.admin',  # La aplicación del administrador de Django.
    'django.contrib.auth',  # La aplicación de autenticación de Django.
    'django.contrib.contenttypes',  # Permite el uso de tipos de contenido para las relaciones entre modelos.
    'django.contrib.sessions',  # Manejo de sesiones en Django.
    'django.contrib.messages',  # Gestión de mensajes (notificaciones) en Django.
    'django.contrib.staticfiles',  # Manejo de archivos estáticos (CSS, JavaScript, imágenes).
    'accounts',  # La aplicación personalizada para gestionar cuentas de usuario.
    'services',  # La aplicación personalizada para gestionar los servicios.
    'maps_location',  # La aplicación personalizada para gestionar lat y longitud de mapas.
    'rest_framework',  # Necesario para usar Django REST Framework, que permite construir APIs RESTful.
    'rest_framework.authtoken',  # Para autenticar usuarios utilizando tokens en Django REST Framework.
    'corsheaders',  # Middleware para gestionar CORS (Cross-Origin Resource Sharing).
    'django_extensions',
]

MIDDLEWARE = [  # Lista de middleware que se aplican a las solicitudes y respuestas.
    'django.middleware.security.SecurityMiddleware',  # Middleware que proporciona medidas de seguridad básicas.
    'django.contrib.sessions.middleware.SessionMiddleware',  # Middleware que maneja sesiones de usuario.
    'django.middleware.common.CommonMiddleware',  # Middleware que agrega funcionalidad común.
    'django.middleware.csrf.CsrfViewMiddleware',  # Middleware que protege contra ataques CSRF (Cross-Site Request Forgery).
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Middleware que gestiona la autenticación de usuarios.
    'django.contrib.messages.middleware.MessageMiddleware',  # Middleware que permite el uso de mensajes de usuario.
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Middleware que protege contra ataques de clickjacking.
    'corsheaders.middleware.CorsMiddleware',  # Middleware que gestiona las cabeceras CORS.
]

REST_FRAMEWORK = {  # Configuración global para Django REST Framework.
    'DEFAULT_AUTHENTICATION_CLASSES': [  # Clases de autenticación predeterminadas para las vistas.
        'rest_framework.authentication.TokenAuthentication',  # Usar autenticación basada en tokens.
    ],
    'DEFAULT_PERMISSION_CLASSES': [  # Clases de permisos predeterminadas para las vistas.
        'rest_framework.permissions.IsAuthenticated',  # Requiere que el usuario esté autenticado.
    ],
    'DEFAULT_PERMISSION_CLASSES': [  # Esta línea sobrescribe la anterior, estableciendo otra configuración de permisos.
        'rest_framework.permissions.AllowAny',  # Permite el acceso a cualquier usuario, autenticado o no.
    ]
}

# Configuración para el envío de correos con Postmark
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend') # Establece el backend de correo electrónico. Usa una variable de entorno, 
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.postmarkapp.com') # Define el servidor SMTP que se utilizará para enviar correos. 
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))  # Asegúrate de convertir a entero, Define el puerto que se utilizará para la conexión SMTP. 
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'  # Convertir de string a booleano, Indica si se debe usar TLS para la conexión. 
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER') # Define el nombre de usuario para la autenticación en el servidor SMTP. 
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') # Define la contraseña para la autenticación en el servidor SMTP. 
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'default@example.com') # Define la dirección de correo electrónico que aparecerá como remitente por defecto 

ROOT_URLCONF = 'backend.urls' # Especifica el módulo donde se encuentran las URLs del proyecto Django.

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates', # Especifica el backend de plantillas que se utilizará. 
        'DIRS': [], # Define una lista de directorios donde se pueden buscar plantillas.
        'APP_DIRS': True, # Indica si Django debe buscar plantillas dentro de los directorios de las aplicaciones instaladas. 
        'OPTIONS': { # Define una lista de procesadores de contexto que se utilizarán
            'context_processors': [ # Procesador que agrega información de depuración al contexto. 
                'django.template.context_processors.debug', # Procesador que agrega la solicitud actual al contexto, permitiendo acceder a información 
                'django.template.context_processors.request', # Procesador que agrega información sobre la autenticación al contexto, 
                'django.contrib.auth.context_processors.auth', # Procesador que agrega información sobre la autenticación al contexto, 
                'django.contrib.messages.context_processors.messages', # Procesador que agrega mensajes temporales (como los mensajes de éxito o error) 
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

RECAPTCHA_SECRET_KEY = os.getenv('RECAPTCHA_SECRET_KEY') # Aqui busca en las variables de entorno (.env) la llave secreta del recaptcha para nuestra pagina web


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # Utiliza el backend para MySQL/MariaDB
        'NAME': os.getenv('DB_NAME', 'nombre_base_datos'),  # Nombre de tu base de datos
        'USER': os.getenv('DB_USER', 'usuario'),  # Usuario de tu base de datos
        'PASSWORD': os.getenv('DB_PASSWORD', 'contraseña'),  # Contraseña del usuario
        'HOST': os.getenv('DB_HOST', '127.0.0.1'),  # Dirección del servidor de base de datos
        'PORT': os.getenv('DB_PORT', '3306'),  # Puerto de MariaDB (por defecto, 3306)
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"  # Configuración recomendada para evitar problemas de compatibilidad
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # Valida que la contraseña no sea similar a atributos del usuario, como el nombre de usuario o el correo electrónico.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', # Establece un requisito mínimo de longitud para las contraseñas, 
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', # Verifica que la contraseña no sea una de las contraseñas comunes, 
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', # Asegura que la contraseña no sea completamente numérica, 
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us' # Lenguaje por defecto de Django

TIME_ZONE = 'UTC' # Zona UTC por defecto de Django

USE_I18N = True # Habilita la internacionalización (i18n) en el proyecto Django,

USE_TZ = True # Habilita el soporte para zonas horarias (timezone) en el proyecto Django. 


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.CustomUser'

SECURE_SSL_REDIRECT = False
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

CORS_ALLOWED_ORIGINS = [
    "https://localhost:5173",  # La URL de tu frontend (React)
    "https://visitacolbun.cl",
    "https://0273-2800-150-144-d2b-3a84-cfca-a881-d290.ngrok-free.app",
]

MEDIA_URL = '/media/'  # URL de acceso a los archivos de medios
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Ruta donde se almacenarán los archivos de medios en el sistema de archivos
